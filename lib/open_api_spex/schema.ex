defmodule OpenApiSpex.Schema do
  alias OpenApiSpex.{
    Schema, Reference, Discriminator, Xml, ExternalDocumentation
  }
  defstruct [
    :title,
    :multipleOf,
    :maximum,
    :exclusiveMaximum,
    :minimum,
    :exclusiveMinimum,
    :maxLength,
    :minLength,
    :pattern,
    :maxItems,
    :minItems,
    :uniqueItems,
    :maxProperties,
    :minProperties,
    :required,
    :enum,
    :type,
    :allOf,
    :oneOf,
    :anyOf,
    :not,
    :items,
    :properties,
    :additionalProperties,
    :description,
    :format,
    :default,
    :nullable,
    :discriminator,
    :readOnly,
    :writeOnly,
    :xml,
    :externalDocs,
    :example,
    :deprecated
  ]
  @type t :: %__MODULE__{
    title: String.t,
    multipleOf: number,
    maximum: number,
    exclusiveMaximum: number,
    minimum: number,
    exclusiveMinimum: number,
    maxLength: integer,
    minLength: integer,
    pattern: String.t,
    maxItems: integer,
    minItems: integer,
    uniqueItems: boolean,
    maxProperties: integer,
    minProperties: integer,
    required: [String.t],
    enum: [String.t],
    type: String.t,
    allOf: [Schema.t | Reference.t],
    oneOf: [Schema.t | Reference.t],
    anyOf: [Schema.t | Reference.t],
    not: Schema.t | Reference.t,
    items: Schema.t | Reference.t,
    properties: %{String.t => Schema.t | Reference.t},
    additionalProperties: boolean | Schema.t | Reference.t,
    description: String.t,
    format: String.t,
    default: any,
    nullable: boolean,
    discriminator: Discriminator.t,
    readOnly: boolean,
    writeOnly: boolean,
    xml: Xml.t,
    externalDocs: ExternalDocumentation.t,
    example: any,
    deprecated: boolean
  }
end